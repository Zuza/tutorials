Emacs lisp programming tutorial
zuza - 15.08.2010. - 04.09.2011.

* Intro
emacs has a completely functional language that supports writing general-purpose programs as well as extensions
that language is called emacs lisp

easy&long guide >> http://www.gnu.org/software/emacs/emacs-lisp-intro/html_mono/emacs-lisp-intro.html

M = alias for META/ALT
"C-x" denotes Ctrl+x
"C-x a" denotes Ctrl+x (let Ctrl go) a
"C-M-x C-k" denotes Ctrl+Alt+x Ctrl+k

eval-last-sexp = C-x C-e 
  put the cursor point at the end of a expression you wish to evaluate in-place
  these are your friends throughout this tutorial

eval-expression = M-:
  eval expression with the current buffer

;; comments are prefixed with two semicolons

** Help
C-h f <function>                ;; function docs (+ jump to definition)
C-h v <variable>                ;; variable docs (+ jump to definition)
-> this is the true meaning of self-documented
C-h b                           ;; list of key-binds
C-h ?                           ;; list of help features


* Misc
Emacs OS window is divided onto one or more *windows*. Every window shows exactly one *buffer*.
It is possible, although not common, to have multiple OS windows within one process. These are called *frames*.

(buffer-name)                     ;; function call - should be returning "emacs.org"
fill-column                       ;; variable      - return 70 to me ;; note: it wouldn't work if you put parens around it - that would correspond to a function call

(+)                               ;; =0 >> function + accepted 0 params (note: symbols aren't required to start with a letter)
(*)                               ;; =1
(+ 2 2)                           ;; =4
(+ 2 2 5 7)                       ;; =16
;; ERROR: (+ "abc" "def")                ;; doesn't work -> + is only for numbers
(concat "abc" "def")              ;; ="abcdef"
(substring "abcdef" 2 4)          ;; ="cd"

;; ERROR: (concat "The " (+ 2 fill-column) " red foxes.")                    ;; concat doesn't accept numerical args
(concat "The " (number-to-string (+ 2 fill-column)) " red foxes.")           ;; ="The 72 red foxes."

(message "This message appears in the echo area!")
(message "The name of this buffer is: %s. The val is %d." (buffer-name) fill-column)
(message "He saw %d %s"
   (- fill-column 32)
   (concat "red "
      (substring
      "The quick brown foxes jumped." 16 21)
      " leaping."))               ;; this is also OK


* Elisp

** Data types
t                                 ;; true          >> bool alike
nil                               ;; false = ()    >> bool alike
12                                ;; numerical value
-13.124                           ;;    --||--
'rijec                            ;; *symbol* - similar to a string, is used as a function/variable name. It is usually bind to some object.
'12+bla                           ;; symbol
"ovo je string"                   ;; *string*
'(1 . 2)                          ;; so called *cons* cell.. struct of exactly two members: the *car* (first one) and the *cdr* (second and last one). Note: without the apostrophe it doesn't compile
  (car '(1 . 2))                  ;; =1
  (cdr '(1 . 2))                  ;; =2
'(1 2 3 4)                        ;; *list*, completely equivalent to (1 . (2 . (3 . (4 . nil)))). Note: apostrophe; nil = () = empty list
  (cdr '(1 2 3 4 5))              ;; (2 3 4 5) note: a list is actually a cons cell construct
'(bla 32 f o o)                   ;; list, apostrophe symbolizes the literal value, without it emacs would try to evaluate it
'(moze (i ovako () ()) )          ;; list within a list... () = nil
'(nesto (+ 1 2))                  ;; one apostrophe is enough for the whole list (can introduce subtle errors in complex code)
(+ 1 2 3)                         ;; =6, a list that evaluates to a number
;; ERROR: (bla bla ovo je greska) ;; ERROR! it actually tries to find the function bla (which doesn't exist) and pass it the other 4 args
#<buffer emaks>                   ;; an internal emacs structure, there are a lot of these

** Variables

;; syntax: (set  <symbol> <value>)  ;; you probably want to have an apostrophe before the 1st arg
;; syntax: (setq <name>  <value>)  ;; syntactical sugar: so you can leave out the ' before the 1st arg
;; syntax: (setq <name1> <val1> [<name2> <val2> [<name3> <val3> ... ] ] ) ;; vanilla set doesn't support such a thing

(set 'flowers  (+ 1 2 3))                 ;; flowers=6
(set 'flowers '(+ 1 2 3))                 ;; flowers=(+ 1 2 3) -- Note: both '
(setq carnivores '(lion tiger leopard))   ;; carnivores=(lion tiger leopard)
(setq a 5 b '(+ 1 2) c "abc")             ;; a=5, b=(+ 1 2), c="abc"

;; (setq moj-counter (+ moj-counter 1))   ;; ERROR! we didn't initialize moj-counter
(setq moj-counter 0)                      ;; now you can eval the last expression

;; syntax: (let ( (<name1> <val1>) [(<name2> <val2>) [(...)...]] ) <body>) 
;;    -> creates a local variable that is visible only within the let body
;;    -> returns the return value of <body>
;;    -> pretty common-place in complex code

(let 
   ((zebra 'stripes) (tiger 'fierce))  ;; varlist >> zebra='stripes, tiger='fierce
   (message "One kind of animal has %s and another is %s." zebra tiger) ;; body
)

(let 
   ((birch 3) pine fir (oak 'some))      ;; birch=3, pine=nil, fir=nil, oak='some
   (message "Here are %d variables with %s, %s, and %s value."          ;; body
      birch pine fir oak)
)

** Functions

;; native functions are usually implemented in a lisp library, except a few that are implemented in C
;; two kinds of functions: *interactive* and *non-interactive*, but more on that later
;; most of the functions seen so far are non-interactive
;; there is only one difference: the interactive ones can be called with M-x (execute-extended-command)

(defun multiply-by-seven (number) "This is the docstring. This function multiplies a number by 7 and returns the result." (* 7 number))
(multiply-by-seven 6)                     ;; =42, let's try it out

;; C-u >> universal-argument -- we'll need this later
(defun multiply-by-seven (number)   ;; interactive version.. Note: newer functions overwrite the older ones without any errors
   "Multiply NUMBER by seven."
   (interactive "p")                 ;; special interactive argument loading, loads "number" by method "p"
   (message "The result is %d" (* 7 number)))  ;; install the function with C-x C-e, then eval it with C-u 3 M-x multiply-by-seven
                                               ;; also try M-3 M-x multiply-by-seven (although I've commonly seen M-3 rebind to a more useful task)

;; interactive denotes the way how to input the argument. Note: non-interactive (through the call list) vs. interactive (explicit user input)
;; "p" denotes "prefix" = arguments are inputted via C-u <digits> or M-<digits>
;; "n" read a numeric via minibuffer
;; "s" text via minibuffer
;; "f" file that must exist via minibuffer.. TAB TAB for auto-completion (nice!)
;; "b" name of a existing buffer... auto-completion ++

(defun add-two-vars (var1 var2)
   "Docstring of a func that adds two vars"
   (interactive "nFirst arg: \nnSecond arg: ")
   (message "The result is %d" (+ var1 var2))
)

(defun my-open-file (myname)
   "Interactive function that can open a file in this buffer"
   (interactive "fPlease input the name of the file: ")          ;; try using the auto-completion TAB
   (find-file myname)
)

;; more on interactive functions here > http://www.gnu.org/software/emacs/emacs-lisp-intro/html_mono/elisp.html#Interactive-Codes

Have a look at http://www.gnu.org/software/emacs/emacs-lisp-intro/html_mono/emacs-lisp-intro.html#Permanent-Installation
-> installation for windows is a little more complicated, it involves regedit, but nothing too hard/hacky
-> you can always M-x load-file <my-init-file> which will load all requested function in memory for one session

** Language features

*** If
(if (> 5 4) (+ 1 2))                           ;; =3
(let ((a 's1) (b 's1)) (if (equal a b) 100))   ;; =100 >> a='s1 b='s1, returns 100 because a==b
(let ((a 's1) (b 'bla)) (if (equal a b) 100))  ;; =nil >> condition not fulfilled
(if (= 3 3) "truth" "else-block")              ;; ="truth"
(if (<= 7 5) 'my-truth 'else-block)               ;; ='else-block
(if (not (or (< 3 5) (> 3 5))) 'my-truth 'my-lie )   ;; ='my-lie

;; functions with a suffix "p" (predicate) denote they test for something and return either true (t) or false (nil) with respect to their only arg

;; List of operations and a bit more:
;;   -> http://www.gnu.org/software/emacs/emacs-lisp-intro/html_mono/emacs-lisp-intro.html#Review

*** Loop for
(require 'cl) -> should load the below constructions.. I always have this loaded
more info about this on http://www.gnu.org/software/emacs/manual/html_mono/cl.html

(setq L nil suma 0) ;; preparation

(loop for x in (buffer-list) do (add-to-list 'L x) (message "buffer: %s" x))
(loop for var from 1 to 10 do (setq suma (+ suma var)))
(loop repeat 3 do (insert "!!I hope you know how to undo!!\n"))
(loop until (eobp) do (forward-line 1))                           ;; scream for help for new command (once again: C-h f <cmd>)

**** Accumulation clauses:
collect, sum, append, concat, maximize, minimize

(loop for x from 1 to 10 sum x)                      ;; =55
(loop for x from 1 to 10 collect x)                  ;; (1 2 3 ... 10)
(loop for x from 1 to 10 do (setq x (1+ x)) sum x)   ;; =30


* Buffer

(buffer-name)                             ;; name of the current buffer... Unrelated: try calling it with C-u C-x C-e
(buffer-file-name)                        ;; which file does this buffer corresponds
(buffer-list)                             ;; try calling the help with: C-h f buffer-list
(current-buffer)                          ;; buffer-name gives the emacs internal object that corresponds to the current buffer
(other-buffer)
(switch-to-buffer (other-buffer))         ;; .. can be wrong.. Try using (windmove-default-keybindings 'meta)
(buffer-size)                             ;; how many chars in the current buffer
(point)                                   ;; which char am I at?
(point-min)                               ;; min allowable point position (should always be 1?)
(point-max)                               ;; max allowable point position (should always be (buffer-size) ?)


* Window
http://www.chemie.fu-berlin.de/chemnet/use/info/elisp/elisp_26.html

(select-window (next-window))
(window-list)
(windowp (car (window-list)))
(window-buffer (selected-window))         ;; buffer that is currently shown in this window
(delete-window)


* Portability

(cond ((eq system-type 'windows-nt) (load-library "ntemacs-cygwin"))
      ((eq system-type 'gnu/linux) (load-library "linux"))
      (t (load-library "default")))
